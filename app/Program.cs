using app;
using lib;
using System.Diagnostics;

double[,] data =
    {
         {0, 83, 45, 55, 73, 99, 5, 85, 49, 9, 32, 93},
         {83, 0, 90, 68, 15, 41, 9, 59, 71, 72, 29, 64},
         {45, 90, 0, 71, 2, 92, 40, 66, 43, 50, 55, 43},
         {55, 68, 71, 0, 73, 69, 33, 89, 15, 12, 16, 54},
         {73, 15, 2, 73, 0, 15, 81, 66, 62, 79, 98, 55},
         {99, 41, 92, 69, 15, 0, 91, 37, 73, 65, 72, 76},
         {5, 9, 40, 33, 81, 91, 0, 40, 76, 84, 62, 89},
         {85, 59, 66, 89, 66, 37, 40, 0, 72, 34, 54, 89},
         {49, 71, 43, 15, 62, 73, 76, 72, 0, 14, 99, 12},
         {9, 72, 50, 12, 79, 65, 84, 34, 14, 0, 38, 94},
         {32, 29, 55, 16, 98, 72, 62, 54, 99, 38, 0, 6},
         {93, 64, 43, 54, 55, 76, 89, 89, 12, 94, 6, 0}
     };

//double[,] data = {
//{54,56,14,82,47,17,72,20,6,79,60,20,7,38,28,20,15,85,40,96},
//{30,97,20,83,81,35,69,71,16,96,11,80,63,12,41,33,80,1,36,93},
//{55,36,41,48,44,73,38,25,32,45,95,64,27,89,72,47,65,7,67,100},
//{90,1,80,68,65,68,11,35,86,27,69,14,51,19,42,67,57,63,67,21},
//{98,56,50,7,67,73,99,70,26,92,9,7,3,5,65,30,17,82,54,77},
//{72,14,64,77,84,40,93,94,28,92,68,26,21,76,83,76,95,5,16,87},
//{69,47,48,21,80,44,20,10,11,45,56,63,85,55,26,33,62,69,82,51},
//{76,87,42,60,75,98,32,98,66,53,99,2,15,37,71,44,35,63,54,59},
//{16,20,76,94,11,56,77,99,73,96,65,10,2,2,98,59,84,56,70,66},
//{5,67,33,17,48,8,43,40,97,11,54,79,17,40,16,41,57,77,19,62},
//{57,55,72,53,86,86,8,18,9,1,67,22,90,87,34,15,52,89,60,42},
//{68,83,67,80,2,76,35,8,1,89,58,77,10,67,7,67,52,100,33,16},
//{43,25,51,32,98,42,45,12,57,50,2,74,28,40,78,60,19,64,89,76},
//{99,87,46,99,64,46,30,5,34,22,24,11,77,67,79,36,83,62,12,70},
//{56,59,100,33,9,41,11,27,77,61,15,7,41,89,91,18,58,60,57,56},
//{90,27,56,17,83,12,64,45,31,21,63,29,58,84,55,21,86,1,95,83},
//{74,57,66,98,1,42,74,40,38,95,69,7,65,68,72,62,76,70,86,88},
//{42,6,57,82,86,12,13,38,80,41,3,52,26,88,67,86,51,67,4,41},
//{20,25,60,65,84,76,40,24,71,23,13,85,58,79,32,79,26,36,5,62},
//{58,33,40,40,27,34,72,15,53,68,50,76,89,15,38,55,37,25,24,29}
//};

TSPConfig config = new();

config.Epochs = 5000;
config.PopulationSize = 50000;



Stopwatch stopwatch = new Stopwatch();


double[,] distanceMatrix = TSPMatrix.Generate(20, 100);
int size = 20;
for (int i = 0; i < size; i++)
{
    for (int j = 0; j < size; j++)
    {
        Console.Write(distanceMatrix[i, j].ToString("F1") + "\t");
    }
    Console.WriteLine();
}

Solver newSolver = new(20, distanceMatrix, config);

// Начинаем отсчет времени
stopwatch.Start();
//newSolver.Solve();
await newSolver.SolveAsync();
// Останавливаем отсчет времени
stopwatch.Stop();
// Получаем время выполнения
TimeSpan ts = stopwatch.Elapsed;

// Выводим результаты
Console.WriteLine($"Время выполнения: {ts.TotalMilliseconds} мс");
